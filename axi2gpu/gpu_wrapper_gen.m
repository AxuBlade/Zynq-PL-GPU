nr_of_blobs = 32;
ram_add_width = 16;
fileID = fopen('gpu_wrapper.sv','w');

fprintf(fileID,'`timescale 1ns / 1ps                        \n');
fprintf(fileID,'module gpu_wrapper                          \n');
fprintf(fileID,'#(                                          \n');
fprintf(fileID,'    parameter ram_add_width = %d,           \n',ram_add_width);
fprintf(fileID,'    parameter NR_OF_BLOBS = %d              \n',nr_of_blobs);
fprintf(fileID,')                                           \n');
fprintf(fileID,'(                                           \n');
fprintf(fileID,'    input clk,  // system clock             \n');
fprintf(fileID,'    input reset,                            \n');
fprintf(fileID,'\n');
fprintf(fileID,'    // background color                     \n');
fprintf(fileID,'    input wire [11:0] background,           \n');
fprintf(fileID,'\n');
fprintf(fileID,'    // blobs settings:                      \n');
fprintf(fileID,'\n');
for i=0:1:nr_of_blobs-1
    fprintf(fileID,'    // BLOB%d                                               \n',i);
    fprintf(fileID,'    // enable sprite  (show it on screen)                   \n');
    fprintf(fileID,'    input wire sprite_enable%d,                             \n',i);
    fprintf(fileID,'    // position on the screen (y - vertical, x - horizontal)\n');
    fprintf(fileID,'    input wire [9:0] y1_pos%d,                              \n',i);
    fprintf(fileID,'    input wire [9:0] x1_pos%d,                              \n',i);
    fprintf(fileID,'    input wire [9:0] y2_pos%d,                              \n',i);
    fprintf(fileID,'    input wire [9:0] x2_pos%d,                              \n',i);
    fprintf(fileID,'    // start address in RAM, TBD MSBs are nr of BRAM        \n');
    fprintf(fileID,'    input wire [ram_add_width-1:0] ram_address%d,           \n',i);
    fprintf(fileID,'    input wire [1:0]  layer%d,                              \n',i);
    fprintf(fileID,'\n');
end
fprintf(fileID,'    // BRAM write ports                                     \n');
fprintf(fileID,'    input wire [ram_add_width-1:0]  wr_add,                 \n');
fprintf(fileID,'    input wire [11:0] wr_data,                              \n');
fprintf(fileID,'    input wire        wr_req,                               \n');
fprintf(fileID,'\n');
fprintf(fileID,'    // output ports to VGA                                  \n');
fprintf(fileID,'    // pixel                                                \n');
fprintf(fileID,'    output wire [11:0] pixel_send,                          \n');
fprintf(fileID,'    // horizontal/vertical sync                             \n');
fprintf(fileID,'    output wire v_sync,                                     \n');
fprintf(fileID,'    output wire h_sync                                      \n');
fprintf(fileID,');                                                          \n');
fprintf(fileID,'\n');
fprintf(fileID,'    logic sprite_enable [NR_OF_BLOBS-1:0];                  \n');
fprintf(fileID,'    logic [9:0] y1_pos  [NR_OF_BLOBS-1:0];                  \n');
fprintf(fileID,'    logic [9:0] x1_pos  [NR_OF_BLOBS-1:0];                  \n');
fprintf(fileID,'    logic [9:0] y2_pos  [NR_OF_BLOBS-1:0];                  \n');
fprintf(fileID,'    logic [9:0] x2_pos  [NR_OF_BLOBS-1:0];                  \n');
fprintf(fileID,'    logic [ram_add_width-1:0] ram_address [NR_OF_BLOBS-1:0];\n');
fprintf(fileID,'    logic [1:0]  layer [NR_OF_BLOBS-1:0];                   \n');
fprintf(fileID,'\n');
fprintf(fileID,'    gpu #(                                                  \n');
fprintf(fileID,'        .ram_add_width (ram_add_width),                     \n');
fprintf(fileID,'        .NR_OF_BLOBS   (NR_OF_BLOBS  )                      \n');
fprintf(fileID,'    ) gpu_i                                                 \n');
fprintf(fileID,'    (                                                       \n');
fprintf(fileID,'        .clk              (clk          ),                  \n');
fprintf(fileID,'        .reset            (reset        ),                  \n');
fprintf(fileID,'        .background       (background   ),                  \n');
fprintf(fileID,'        .sprite_enable    (sprite_enable),                  \n');
fprintf(fileID,'        .y1_pos           (y1_pos       ),                  \n');
fprintf(fileID,'        .x1_pos           (x1_pos       ),                  \n');
fprintf(fileID,'        .y2_pos           (y2_pos       ),                  \n');
fprintf(fileID,'        .x2_pos           (x2_pos       ),                  \n');
fprintf(fileID,'        .ram_address      (ram_address  ),                  \n');
fprintf(fileID,'        .layer            (layer        ),                  \n');
fprintf(fileID,'        .wr_add           (wr_add       ),                  \n');
fprintf(fileID,'        .wr_data          (wr_data      ),                  \n');
fprintf(fileID,'        .wr_req           (wr_req       ),                  \n');
fprintf(fileID,'        .pixel_send       (pixel_send   ),                  \n');
fprintf(fileID,'        .v_sync           (v_sync       ),                  \n');
fprintf(fileID,'        .h_sync           (h_sync       )                   \n');
fprintf(fileID,'    );                                                      \n');
fprintf(fileID,'\n');
for i=0:1:nr_of_blobs-1
    fprintf(fileID,'    // BLOB%d                                   \n',i);
    fprintf(fileID,'    assign  sprite_enable[%d] = sprite_enable%d;\n',i,i);
    fprintf(fileID,'    assign         y1_pos[%d] =        y1_pos%d;\n',i,i);
    fprintf(fileID,'    assign         x1_pos[%d] =        x1_pos%d;\n',i,i);
    fprintf(fileID,'    assign         y2_pos[%d] =        y2_pos%d;\n',i,i);
    fprintf(fileID,'    assign         x2_pos[%d] =        x2_pos%d;\n',i,i);
    fprintf(fileID,'    assign    ram_address[%d] =   ram_address%d;\n',i,i);
    fprintf(fileID,'    assign          layer[%d] =         layer%d;\n',i,i);
    fprintf(fileID,'\n');
end
fprintf(fileID,'endmodule\n');